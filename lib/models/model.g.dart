// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Exercise.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Exercise TABLE
class TableExercise extends SqfEntityTableBase {
  TableExercise() {
    // declare properties of EntityTable
    tableName = 'exercises';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('created_at', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updated_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableExercise();
  }
}

// Performance TABLE
class TablePerformance extends SqfEntityTableBase {
  TablePerformance() {
    // declare properties of EntityTable
    tableName = 'performances';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('reps', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('sets', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('weight', DbType.real, isNotNull: true),
      SqfEntityFieldRelationshipBase(
          TableExercise.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'exercise_id',
          isNotNull: true),
      SqfEntityFieldBase('created_at', DbType.datetime,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('updated_at', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePerformance();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    preSaveAction = dbModel.preSaveAction;
    logFunction = dbModel.logFunction;
    databaseTables = [
      TableExercise.getInstance,
      TablePerformance.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = dbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Exercise
class Exercise extends TableBase {
  Exercise({this.id, this.name, this.created_at, this.updated_at}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Exercise.withFields(this.name, this.created_at, this.updated_at) {
    _setDefaultValues();
  }
  Exercise.withId(this.id, this.name, this.created_at, this.updated_at) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Exercise.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    if (o['updated_at'] != null) {
      updated_at = int.tryParse(o['updated_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updated_at'].toString())!)
          : DateTime.tryParse(o['updated_at'].toString());
    }
  }
  // FIELDS (Exercise)
  int? id;
  String? name;
  DateTime? created_at;
  DateTime? updated_at;

  // end FIELDS (Exercise)

// COLLECTIONS & VIRTUALS (Exercise)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plPerformances', 'plField2'..]) or so on..
  List<Performance>? plPerformances;

  /// get Performance(s) filtered by id=exercise_id
  PerformanceFilterBuilder? getPerformances(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Performance()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .exercise_id
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Exercise)

  static const bool _softDeleteActivated = false;
  ExerciseManager? __mnExercise;

  ExerciseManager get _mnExercise {
    return __mnExercise = __mnExercise ?? ExerciseManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }

// COLLECTIONS (Exercise)
    if (!forQuery) {
      map['Performances'] = await getPerformances()!.toMapList();
    }
// END COLLECTIONS (Exercise)

    return map;
  }

  /// This method returns Json String [Exercise]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Exercise]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      name,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      name,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Exercise>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Exercise.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Exercise>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Exercise>[];
    try {
      objList = list
          .map((exercise) => Exercise.fromMap(exercise as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Exercise.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Exercise>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Exercise> objList = <Exercise>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Exercise.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercises.plPerformances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformances'))) {
          /*_loadedfields!.add('exercises.plPerformances'); */ obj
                  .plPerformances =
              obj.plPerformances ??
                  await obj.getPerformances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Exercise by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Exercise] if exist, otherwise returns null
  Future<Exercise?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Exercise? obj;
    final data = await _mnExercise.getById([id]);
    if (data.length != 0) {
      obj = Exercise.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercises.plPerformances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformances'))) {
          /*_loadedfields!.add('exercises.plPerformances'); */ obj
                  .plPerformances =
              obj.plPerformances ??
                  await obj.getPerformances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Exercise) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExercise.insert(this, ignoreBatch);
    } else {
      await _mnExercise.update(this);
    }

    return id;
  }

  /// Saves the (Exercise) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExercise.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnExercise.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Exercise. Returns a new Primary Key value of Exercise

  /// <returns>Returns a new Primary Key value of Exercise
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Exercise> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Exercise> exercises,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in exercises) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < exercises.length; i++) {
        if (exercises[i].id == null) {
          exercises[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnExercise.rawInsert(
          'INSERT OR REPLACE INTO exercises (id, name, created_at, updated_at)  VALUES (?,?,?,?)',
          [
            id,
            name,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            updated_at != null ? updated_at!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Exercise id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Exercise id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Exercise Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Exercise>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Exercise> exercises,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnExercise.rawInsertAll(
        'INSERT OR REPLACE INTO exercises (id, name, created_at, updated_at)  VALUES (?,?,?,?)',
        exercises,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Exercise

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Exercise invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await Performance()
          .select()
          .exercise_id
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnExercise
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnExercise.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Exercise] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ExerciseFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExerciseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ExerciseFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExerciseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion exercise

// region ExerciseField
class ExerciseField extends FilterBase {
  ExerciseField(ExerciseFilterBuilder exerciseFB) : super(exerciseFB);

  @override
  ExerciseFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder isNull() {
    return super.isNull() as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ExerciseFilterBuilder;
  }

  @override
  ExerciseField get not {
    return super.not as ExerciseField;
  }
}
// endregion ExerciseField

// region ExerciseFilterBuilder
class ExerciseFilterBuilder extends ConjunctionBase {
  ExerciseFilterBuilder(Exercise obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnExercise = obj._mnExercise;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ExerciseManager? _mnExercise;

  /// put the sql keyword 'AND'
  @override
  ExerciseFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ExerciseFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ExerciseFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ExerciseFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ExerciseFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ExerciseFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ExerciseFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExerciseFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExerciseFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExerciseFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExerciseFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ExerciseField _setField(ExerciseField? field, String colName, DbType dbtype) {
    return ExerciseField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ExerciseField? _id;
  ExerciseField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ExerciseField? _name;
  ExerciseField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ExerciseField? _created_at;
  ExerciseField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  ExerciseField? _updated_at;
  ExerciseField get updated_at {
    return _updated_at = _setField(_updated_at, 'updated_at', DbType.datetime);
  }

  /// Deletes List<Exercise> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Performance) according to DeleteRule.CASCADE
    final idListPerformanceBYexercise_id = toListPrimaryKeySQL(false);
    final resPerformanceBYexercise_id = await Performance()
        .select()
        .where('exercise_id IN (${idListPerformanceBYexercise_id['sql']})',
            parameterValue: idListPerformanceBYexercise_id['args'])
        .delete(hardDelete);
    if (!resPerformanceBYexercise_id.success) {
      return resPerformanceBYexercise_id;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnExercise!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnExercise!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from exercises ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnExercise!.updateBatch(qparams, values);
  }

  /// This method always returns [Exercise] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Exercise?
  @override
  Future<Exercise?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnExercise!.toList(qparams);
    final data = await objFuture;
    Exercise? obj;
    if (data.isNotEmpty) {
      obj = Exercise.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercises.plPerformances') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformances'))) {
          /*_loadedfields!.add('exercises.plPerformances'); */ obj
                  .plPerformances =
              obj.plPerformances ??
                  await obj.getPerformances()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Exercise]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Exercise?
  @override
  Future<Exercise> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Exercise();
  }

  /// This method returns int. [Exercise]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? exerciseCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final exercisesFuture = await _mnExercise!.toList(qparams);
    final int count = exercisesFuture[0]['CNT'] as int;
    if (exerciseCount != null) {
      exerciseCount(count);
    }
    return count;
  }

  /// This method returns List<Exercise> [Exercise]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Exercise>
  @override
  Future<List<Exercise>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Exercise> exercisesData = await Exercise.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return exercisesData;
  }

  /// This method returns Json String [Exercise]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Exercise]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Exercise]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnExercise!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Exercise]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM exercises WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnExercise!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Exercise]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnExercise!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Exercise.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnExercise!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ExerciseFilterBuilder

// region ExerciseFields
class ExerciseFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fUpdated_at;
  static TableField get updated_at {
    return _fUpdated_at = _fUpdated_at ??
        SqlSyntax.setField(_fUpdated_at, 'updated_at', DbType.datetime);
  }
}
// endregion ExerciseFields

//region ExerciseManager
class ExerciseManager extends SqfEntityProvider {
  ExerciseManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'exercises';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ExerciseManager
// region Performance
class Performance extends TableBase {
  Performance(
      {this.id,
      this.reps,
      this.sets,
      this.weight,
      this.exercise_id,
      this.created_at,
      this.updated_at}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Performance.withFields(this.reps, this.sets, this.weight, this.exercise_id,
      this.created_at, this.updated_at) {
    _setDefaultValues();
  }
  Performance.withId(this.id, this.reps, this.sets, this.weight,
      this.exercise_id, this.created_at, this.updated_at) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Performance.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['reps'] != null) {
      reps = int.tryParse(o['reps'].toString());
    }
    if (o['sets'] != null) {
      sets = int.tryParse(o['sets'].toString());
    }
    if (o['weight'] != null) {
      weight = double.tryParse(o['weight'].toString());
    }
    exercise_id = int.tryParse(o['exercise_id'].toString());

    if (o['created_at'] != null) {
      created_at = int.tryParse(o['created_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['created_at'].toString())!)
          : DateTime.tryParse(o['created_at'].toString());
    }
    if (o['updated_at'] != null) {
      updated_at = int.tryParse(o['updated_at'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['updated_at'].toString())!)
          : DateTime.tryParse(o['updated_at'].toString());
    }

    // RELATIONSHIPS FromMAP
    plExercise = o['exercise'] != null
        ? Exercise.fromMap(o['exercise'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Performance)
  int? id;
  int? reps;
  int? sets;
  double? weight;
  int? exercise_id;
  DateTime? created_at;
  DateTime? updated_at;

  // end FIELDS (Performance)

// RELATIONSHIPS (Performance)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plExercise', 'plField2'..]) or so on..
  Exercise? plExercise;

  /// get Exercise By Exercise_id
  Future<Exercise?> getExercise(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Exercise().getById(exercise_id,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Performance)

  static const bool _softDeleteActivated = false;
  PerformanceManager? __mnPerformance;

  PerformanceManager get _mnPerformance {
    return __mnPerformance = __mnPerformance ?? PerformanceManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (reps != null || !forView) {
      map['reps'] = reps;
    }
    if (sets != null || !forView) {
      map['sets'] = sets;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (exercise_id != null) {
      map['exercise_id'] = forView
          ? plExercise == null
              ? exercise_id
              : plExercise!.name
          : exercise_id;
    } else if (exercise_id != null || !forView) {
      map['exercise_id'] = null;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (reps != null || !forView) {
      map['reps'] = reps;
    }
    if (sets != null || !forView) {
      map['sets'] = sets;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (exercise_id != null) {
      map['exercise_id'] = forView
          ? plExercise == null
              ? exercise_id
              : plExercise!.name
          : exercise_id;
    } else if (exercise_id != null || !forView) {
      map['exercise_id'] = null;
    }
    if (created_at != null) {
      map['created_at'] = forJson
          ? created_at!.toString()
          : forQuery
              ? created_at!.millisecondsSinceEpoch
              : created_at;
    } else if (created_at != null || !forView) {
      map['created_at'] = null;
    }
    if (updated_at != null) {
      map['updated_at'] = forJson
          ? updated_at!.toString()
          : forQuery
              ? updated_at!.millisecondsSinceEpoch
              : updated_at;
    } else if (updated_at != null || !forView) {
      map['updated_at'] = null;
    }

    return map;
  }

  /// This method returns Json String [Performance]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Performance]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      reps,
      sets,
      weight,
      exercise_id,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      reps,
      sets,
      weight,
      exercise_id,
      created_at != null ? created_at!.millisecondsSinceEpoch : null,
      updated_at != null ? updated_at!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Performance>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Performance.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Performance>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Performance>[];
    try {
      objList = list
          .map((performance) =>
              Performance.fromMap(performance as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Performance.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Performance>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Performance> objList = <Performance>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Performance.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercise'))) {
          obj.plExercise =
              obj.plExercise ?? await obj.getExercise(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Performance by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Performance] if exist, otherwise returns null
  Future<Performance?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Performance? obj;
    final data = await _mnPerformance.getById([id]);
    if (data.length != 0) {
      obj = Performance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercise'))) {
          obj.plExercise =
              obj.plExercise ?? await obj.getExercise(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Performance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPerformance.insert(this, ignoreBatch);
    } else {
      await _mnPerformance.update(this);
    }

    return id;
  }

  /// Saves the (Performance) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPerformance.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPerformance.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Performance. Returns a new Primary Key value of Performance

  /// <returns>Returns a new Primary Key value of Performance
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Performance> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Performance> performances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in performances) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < performances.length; i++) {
        if (performances[i].id == null) {
          performances[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPerformance.rawInsert(
          'INSERT OR REPLACE INTO performances (id, reps, sets, weight, exercise_id, created_at, updated_at)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            reps,
            sets,
            weight,
            exercise_id,
            created_at != null ? created_at!.millisecondsSinceEpoch : null,
            updated_at != null ? updated_at!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Performance id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Performance id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Performance Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Performance>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Performance> performances,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnPerformance.rawInsertAll(
        'INSERT OR REPLACE INTO performances (id, reps, sets, weight, exercise_id, created_at, updated_at)  VALUES (?,?,?,?,?,?,?)',
        performances,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Performance

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Performance invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnPerformance
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPerformance.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Performance] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  PerformanceFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PerformanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PerformanceFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PerformanceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion performance

// region PerformanceField
class PerformanceField extends FilterBase {
  PerformanceField(PerformanceFilterBuilder performanceFB)
      : super(performanceFB);

  @override
  PerformanceFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder isNull() {
    return super.isNull() as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PerformanceFilterBuilder;
  }

  @override
  PerformanceField get not {
    return super.not as PerformanceField;
  }
}
// endregion PerformanceField

// region PerformanceFilterBuilder
class PerformanceFilterBuilder extends ConjunctionBase {
  PerformanceFilterBuilder(Performance obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnPerformance = obj._mnPerformance;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PerformanceManager? _mnPerformance;

  /// put the sql keyword 'AND'
  @override
  PerformanceFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PerformanceFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PerformanceFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PerformanceFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PerformanceFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PerformanceFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PerformanceFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PerformanceFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PerformanceFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PerformanceFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PerformanceFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PerformanceField _setField(
      PerformanceField? field, String colName, DbType dbtype) {
    return PerformanceField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PerformanceField? _id;
  PerformanceField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  PerformanceField? _reps;
  PerformanceField get reps {
    return _reps = _setField(_reps, 'reps', DbType.integer);
  }

  PerformanceField? _sets;
  PerformanceField get sets {
    return _sets = _setField(_sets, 'sets', DbType.integer);
  }

  PerformanceField? _weight;
  PerformanceField get weight {
    return _weight = _setField(_weight, 'weight', DbType.real);
  }

  PerformanceField? _exercise_id;
  PerformanceField get exercise_id {
    return _exercise_id =
        _setField(_exercise_id, 'exercise_id', DbType.integer);
  }

  PerformanceField? _created_at;
  PerformanceField get created_at {
    return _created_at = _setField(_created_at, 'created_at', DbType.datetime);
  }

  PerformanceField? _updated_at;
  PerformanceField get updated_at {
    return _updated_at = _setField(_updated_at, 'updated_at', DbType.datetime);
  }

  /// Deletes List<Performance> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPerformance!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPerformance!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from performances ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPerformance!.updateBatch(qparams, values);
  }

  /// This method always returns [Performance] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Performance?
  @override
  Future<Performance?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPerformance!.toList(qparams);
    final data = await objFuture;
    Performance? obj;
    if (data.isNotEmpty) {
      obj = Performance.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercise'))) {
          obj.plExercise =
              obj.plExercise ?? await obj.getExercise(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Performance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Performance?
  @override
  Future<Performance> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Performance();
  }

  /// This method returns int. [Performance]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? performanceCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final performancesFuture = await _mnPerformance!.toList(qparams);
    final int count = performancesFuture[0]['CNT'] as int;
    if (performanceCount != null) {
      performanceCount(count);
    }
    return count;
  }

  /// This method returns List<Performance> [Performance]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Performance>
  @override
  Future<List<Performance>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Performance> performancesData = await Performance.fromMapList(
        data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return performancesData;
  }

  /// This method returns Json String [Performance]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Performance]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Performance]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPerformance!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Performance]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM performances WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnPerformance!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Performance]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPerformance!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Performance.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPerformance!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PerformanceFilterBuilder

// region PerformanceFields
class PerformanceFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fReps;
  static TableField get reps {
    return _fReps =
        _fReps ?? SqlSyntax.setField(_fReps, 'reps', DbType.integer);
  }

  static TableField? _fSets;
  static TableField get sets {
    return _fSets =
        _fSets ?? SqlSyntax.setField(_fSets, 'sets', DbType.integer);
  }

  static TableField? _fWeight;
  static TableField get weight {
    return _fWeight =
        _fWeight ?? SqlSyntax.setField(_fWeight, 'weight', DbType.real);
  }

  static TableField? _fExercise_id;
  static TableField get exercise_id {
    return _fExercise_id = _fExercise_id ??
        SqlSyntax.setField(_fExercise_id, 'exercise_id', DbType.integer);
  }

  static TableField? _fCreated_at;
  static TableField get created_at {
    return _fCreated_at = _fCreated_at ??
        SqlSyntax.setField(_fCreated_at, 'created_at', DbType.datetime);
  }

  static TableField? _fUpdated_at;
  static TableField get updated_at {
    return _fUpdated_at = _fUpdated_at ??
        SqlSyntax.setField(_fUpdated_at, 'updated_at', DbType.datetime);
  }
}
// endregion PerformanceFields

//region PerformanceManager
class PerformanceManager extends SqfEntityProvider {
  PerformanceManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'performances';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion PerformanceManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
